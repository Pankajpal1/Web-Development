                        MIDDLEWARE
What is Middleware?
They are functions that run during the request/response lifecycle. Run between the time request enters Express
and the Response leaves express.

Each MW has access to req/res objects. When a request comes in and we hit the first middleware, that MW
can end the cycle by res.send(), or it can call the next MW.

                    MORGAN - AN EXTERNAL MIDDLEWARE
Helps us log https request info to our terminal. To use Morgan as a MW, we have to tell express to run it as a middleware using app.use()
It waits until the response goes before it logs the details, comes at the end.

                    DEFINING OUR OWN MIDDLEWARE

app.get("/", function(req, res, NEXT) {
    next(); refers to the next middleware and executes it.
})


* We can add data to request bodies before any of your route handlers are executed.
for eg, check if user is authenticated.

If you place your middleware between/after routes, the routes which are written before can run.
And if you add some properties in your middleware and the route runs before the MW, it can crash the program.

SO DEFINE THE APPROPRIATE MIDDLEWARE BEFORE YOUR ROUTES

We can also pass a route in our MW

We also app.use() to set up 404 routes as a last resort. The other MW will run tho.

                    FAKE AUTHENTICATION DEMO
We are sending password as a query string, but you should NEVER do this

                    PROTECTING SPECIFIC ROUTES
In a get request, we can actually pass multiple callback funtions. You can pass multiple callbacks to your 
routes which can behave as middleware.

This is better because it promotes reusability and it's more clear than just (req, res, next) => {}