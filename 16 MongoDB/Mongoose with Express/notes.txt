A simple web app, where we perform CRUD using express and MongoDB

1. make server.js file
2. Integrating Mongoose -> move this logic to a separate file
3. We will have models in our data. Make a separate folder for your models, write the logic there
    and import the required stuff from there. because in bigger apps, you will have a lot of models

* Jis jis file mein Database se interact karoge, wahan mongoose.connect() karo

4. Made a product.js file, exporting the Product model from there.
5. Made a initialData.js file, to add data to start with.
6. setting up root resource in express
7. showing all products.
8. show route - use findById(), why not name? Because there are spaces etc, which can crash our app.
    To solve this, we need to make a URL slug. (/what-is-a-url-slug/)

9. Potential errors -> * id does not exist (Mongo can't find it)
                       * product may not be inserted successfully
                       * right now, we can't enter floating point numbers in our form

10. Creating products -> form and route (like in crud app)

*** DATA PERSISTENCE ✨✨

11. Updating
    use value="" to display the current information and edit
    We will use a patch route, and when updating with id, set runValidators: true!!

    But how do we set existing category on the edit form.
    "selected" attribute
    Our logic is to compare the category with the options
    <option value="fruit" <%= product.category === "fruit" ? "selected": "" %>>fruit</option>
    <option value="vegetable" <%= product.category === "vegetable" ? "selected": "" %>>vegetable</option>
    <option value="dairy" <%= product.category === "dairy" ? "selected": "" %>>dairy</option>
        
    But it is tedious and not scalable, optimised approach in edit.ejs

12. DELETING
    We will create a delete route
    .findByIdAndDelete()

13. BONUS: filtering by category
    How?
    /categories/fruit      it's used to navigate to a route/endpoint
    or 
    /products?category=fruit ✅ (it's used to apply filters etc)